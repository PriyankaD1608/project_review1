# -*- coding: utf-8 -*-
"""Adam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17YZzsUXl6kTd9ge0rKJdzPjykp-fTJaJ
"""

import torch
import torch.nn as nn
import torchvision.transforms as transforms
import torchvision.datasets as dsets

# Set seed
torch.manual_seed(0)

#STEP1

train_dataset = dsets.MNIST(root='./data', 
                            train=True, 
                            transform=transforms.ToTensor(),
                            download=True)

test_dataset = dsets.MNIST(root='./data', 
                           train=False, 
                           transform=transforms.ToTensor())

#STEP2

batch_size = 100
n_iters = 3000
num_epochs = n_iters / (len(train_dataset) / batch_size)
num_epochs = int(num_epochs)

train_loader = torch.utils.data.DataLoader(dataset=train_dataset, 
                                           batch_size=batch_size, 
                                           shuffle=True)

test_loader = torch.utils.data.DataLoader(dataset=test_dataset, 
                                          batch_size=batch_size, 
                                          shuffle=False)

# STEP3

class FeedforwardNeuralNetModel(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim):
        super(FeedforwardNeuralNetModel, self).__init__()
        # Linear function
        self.fc1 = nn.Linear(input_dim, hidden_dim) 
        # Non-linearity
        self.relu = nn.ReLU()
        # Linear function (readout)
        self.fc2 = nn.Linear(hidden_dim, output_dim)  

    def forward(self, x):
        # Linear function
        out = self.fc1(x)
        # Non-linearity
        out = self.relu(out)
        # Linear function (readout)
        out = self.fc2(out)
        return out

#STEP4

input_dim = 28*28
hidden_dim = 100
output_dim = 10

model = FeedforwardNeuralNetModel(input_dim, hidden_dim, output_dim)

#STEP5

criterion = nn.CrossEntropyLoss()


#STEP6

optimizer = torch.optim.Adam(model.parameters())

#STEP 7
iter = 0
for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):
     
        images = images.view(-1, 28*28).requires_grad_()
    

        # Clear gradients w.r.t. parameters
        optimizer.zero_grad()

        # Forward pass to get output/logits
        outputs = model(images)

        # Calculate Loss: softmax --> cross entropy loss
        loss = criterion(outputs, labels)

        # Getting gradients w.r.t. parameters
        loss.backward()

        # Updating parameters
        optimizer.step()

        iter += 1

        if iter % 500 == 0:
            # Calculate Accuracy         
            correct = 0
            total = 0
            # Iterate through test dataset
            for images, labels in test_loader:
                # Load images to a Torch Variable
                images = images.view(-1, 28*28)

                # Forward pass only to get logits/output
                outputs = model(images)

                # Get predictions from the maximum value
                _, predicted = torch.max(outputs.data, 1)

                # Total number of labels
                total += labels.size(0)

                # Total correct predictions
                correct += (predicted == labels).sum()

            accuracy = 100 * correct / total

            # Print Loss
            print('Iteration: {}. Loss: {}. Accuracy: {}'.format(iter, loss.item(), accuracy))

### METHOD 2 ###
import numpy as np
import math
X= [0.5, 2.5]
Y= [0.2, 0.9]

def f(w,b,x): #sigmoid with parameters w,b
   return 1.0 / (1.0 * np.exp(- (w*x +b)))

def error(w,b):
  err=0.0
  for x,y in zip(X,Y):
    fx = f(w,b,x)
    err += 0.5 * (fx -y) **2
    return err 

def grad_b(w,b,x,y):
  fx = f(w,b,x)
  return (fx -y) * fx * (1-fx)

def grad_w(w,b,x,y):
  fx= f(w,b,x)
  return (fx-y) * fx * (1-fx) * x 
 
#defining update function
def adam() :
  w_b_dw_db = [(-2, -2, 0,0)]
  w_history, b_history, error_history = [],[],[]

  w,b, eta, mini_batch_size, num_points_seen = -2, -2, 0.1, 10, 0
  m_w, m_b, v_w, v_b, eps, beta1, beta2 = 0, 0, 0, 0, 1e-8, 0.9, 0.999

  for i in range(max_epochs):
    dw,db=0,0
    for x,y in zip(X,Y):
      dw += grad_w(w,b,x, y)
      db += grad_b(w,b,x, y)

      m_w= beta1 * m_w + (1-beta1)*dw
      m_b= beta1 * m_b + (1-beta1)*db

      v_w= beta2 * v_w + (1-beta2)*dw**2
      v_b= beta2 * v_b + (1-beta2)*db**2

      m_w= m_w / (1-math.pow(beta1, i+1))
      m_b= m_w / (1-math.pow(beta1, i+1))

      v_w= v_w / (1-math.pow(beta2, i+1))
      v_b= v_w / (1-math.pow(beta2, i+1))
      
      w=w- (eta / np.sqrt(v_w + eps)) *dw
      b=b -(eta / np.sqrt(v_b + eps))*db

  print(v_w)

